USE QLTV
GO
CREATE TABLE LOAIDOCGIA
(
	IDLoaiDG int PRIMARY KEY NOT NULL,
	TenLoaiDG nvarchar(50) NOT NULL
)
GO
CREATE TABLE THEDOCGIA
(
	IDDocGia int PRIMARY KEY NOT NULL,
	HoTenDG nvarchar(50) NOT NULL,
	NgaySinhDG date NOT NULL,
	DiaChiDG nvarchar(50) NOT NULL,
	EmailDG varchar(30) NOT NULL,
	IDLoaiDG int FOREIGN KEY REFERENCES LOAIDOCGIA(IDLoaiDG),
	NgayLapThe date NOT NULL,
	NgayHetHan date,
	TongNo money DEFAULT(0)
)
GO
CREATE TABLE LOAISACH
(
	IDLoaiSach int PRIMARY KEY NOT NULL,
	TenLoaiSach nvarchar(50) NOT NULL
)
GO
CREATE TABLE DAUSACH
(
	IDDauSach int PRIMARY KEY NOT NULL,
	TenDauSach nvarchar(200) NOT NULL,
	IDLoaiSach int FOREIGN KEY REFERENCES LOAISACH(IDLoaiSach)
)
GO
CREATE TABLE TACGIA
(
	IDTacGia int PRIMARY KEY NOT NULL,
	TenTacGia nvarchar(50) NOT NULL,
	NgaySinh date NOT NULL
)
GO
CREATE TABLE SACH
(
	IDSach int PRIMARY KEY NOT NULL,
	IDDauSach int FOREIGN KEY REFERENCES DAUSACH(IDDauSach),
	IDTacGia int FOREIGN KEY REFERENCES TACGIA(IDTacGia),
	NhaXB nvarchar(20) NOT NULL,
	NamXB int NOT NULL,
	SoLuongTon int DEFAULT(0),
	GiaTien money DEFAULT(0) NOT NULL
)
GO
CREATE TABLE CUONSACH
(
	IDCuonSach int PRIMARY KEY NOT NULL,
	IDSach int FOREIGN KEY REFERENCES SACH(IDSach),
	TinhTrang nvarchar(20) DEFAULT(N'Chưa cho mượn') --o
)
GO
CREATE TABLE PHIEUNHAPSACH
(
	IDPhieuNhap int PRIMARY KEY NOT NULL,
	NgayNhap date NOT NULL,
	TongTien money DEFAULT(0) --o
)
GO
CREATE TABLE CT_PHIEUNHAPSACH
(
	IDCTPhieuNhap int PRIMARY KEY NOT NULL,
	IDPhieuNhap int FOREIGN KEY REFERENCES PHIEUNHAPSACH(IDPhieuNhap),
	IDSach int FOREIGN KEY REFERENCES SACH(IDSach),
	SoLuong int DEFAULT(0) NOT NULL,
	DonGia money DEFAULT(0) NOT NULL,
	ThanhTien money DEFAULT(0) --o
)
GO
CREATE TABLE PHIEUMUON
(
	IDPhieuMuon int PRIMARY KEY NOT NULL,	
	IDDocGia int FOREIGN KEY REFERENCES THEDOCGIA(IDDocGia),
	NgayMuon date NOT NULL,
	HanTra date --o
)
GO
CREATE TABLE CT_PHIEUMUON
(
	IDCTPhieuMuon int NOT NULL,
	IDPhieuMuon int FOREIGN KEY REFERENCES PHIEUMUON(IDPhieuMuon),
	IDCuonSach int FOREIGN KEY REFERENCES CUONSACH(IDCuonSach)
	CONSTRAINT PK_CPM PRIMARY KEY (IDCTPhieuMuon, IDCuonSach) --- 26/5
)
GO
CREATE TABLE PHIEUTRA
(
	IDPhieuTra int PRIMARY KEY NOT NULL,
	IDDocGia int FOREIGN KEY REFERENCES THEDOCGIA(IDDocGia),
	NgayTra date NOT NULL,
	TienPhatKyNay money DEFAULT(0),
	SoTienTra money DEFAULT(0),
	TienNoKyNay money DEFAULT(0)
)
GO
CREATE TABLE CT_PHIEUTRA
(
	IDCTPhieuTra int NOT NULL,
	IDPhieuTra int FOREIGN KEY REFERENCES PHIEUTRA(IDPhieuTra),
	IDCuonSach int FOREIGN KEY REFERENCES CUONSACH(IDCuonSach),
	IDPhieuMuon int FOREIGN KEY REFERENCES PHIEUMUON(IDPhieuMuon),
	SoNgayMuon int, --o
	TienPhat money DEFAULT(0) --o
	CONSTRAINT PK_CPT PRIMARY KEY (IDCTPhieuTra, IDCuonSach)
)
GO
CREATE TABLE PHIEUTHUTIENPHAT
(
	IDPhieuThu int PRIMARY KEY NOT NULL,
	IDDocGia int FOREIGN KEY REFERENCES THEDOCGIA(IDDocGia),
	NgayLap date NOT NULL,
	SoTienThu money DEFAULT(0),
	ConLai money DEFAULT(0) --O
)
GO
CREATE TABLE BCTINHHINHMUONSACH
(
	IDBCMuonSach int PRIMARY KEY NOT NULL,
	NgayLap date, --- 28/5
	Thang int NOT NULL,
	Nam int NOT NULL,	
	TongSoLuotMuon int DEFAULT(0) --o
)
GO
CREATE TABLE CT_BCTINHHINHMUONSACH
(
	IDCTBCMuonSach int PRIMARY KEY NOT NULL,
	IDBCMuonSach int FOREIGN KEY REFERENCES BCTINHHINHMUONSACH(IDBCMuonSach),
	IDLoaiSach int FOREIGN KEY REFERENCES LOAISACH(IDLoaiSach),
	SoLuotMuon int DEFAULT(0),
	TiLe float DEFAULT(0)
)
GO
CREATE TABLE BCSACHTRATRE
(
	IDBCSachTre int PRIMARY KEY NOT NULL,
	NgayThangNam date NOT NULL,
	IDCuonSach int FOREIGN KEY REFERENCES CUONSACH(IDCuonSach),
	IDPhieuMuon int FOREIGN KEY REFERENCES PHIEUMUON(IDPhieuMuon),
	SoNgayTraTre int 
)
GO
CREATE TABLE USERS
(
	UserName varchar(50) PRIMARY KEY NOT NULL,	
	Pwd varchar(50) NOT NULL,
	IDDocGia int FOREIGN KEY REFERENCES THEDOCGIA(IDDocGia)
)
GO
CREATE TABLE CT_USERADMIN
(	
	IDAdmin int PRIMARY KEY NOT NULL,
	HoTenAdmin nvarchar(50) NOT NULL,
	NgaySinhAdmin date NOT NULL,
	DiaChiAdmin nvarchar(50) NOT NULL,
	EmailAdmin varchar(30) NOT NULL
)
GO
CREATE TABLE USERADMIN
(	
	UserNameAdmin varchar(50) PRIMARY KEY NOT NULL,
	PasswordAdmin varchar(50) NOT NULL,
	IDAdmin int FOREIGN KEY REFERENCES CT_USERADMIN(IDAdmin) --- 21/5
)
GO
CREATE TABLE THAMSO
(
	TuoiMin int DEFAULT(18),
	TuoiMax int DEFAULT(55),
	HanThe int DEFAULT(6),
	KhoangCachXB int DEFAULT(8),
	SoSachMuonMax int DEFAULT(5),
	SoNgayMuonMax int DEFAULT(4),
	TienPhatMoiNgay money DEFAULT(1000),
	ApDungQDSoTienThu int DEFAULT(1)
)
GO
INSERT INTO THAMSO VALUES (18, 55, 6, 8, 5, 4, 1000, 1)


GO
--DROP TRIGGER TRG_IU_IDG
CREATE TRIGGER TRG_IU_IDG ON THEDOCGIA
FOR INSERT, UPDATE
AS
BEGIN

/*Tuổi độc giả*/
	DECLARE @NGAYSINHDG date, @NGAYLAPTHE date, @TUOIMIN int, @TUOIMAX int
	
	SELECT @NGAYSINHDG = NgaySinhDG, @NGAYLAPTHE = NgayLapThe
	FROM INSERTED
	SELECT @TUOIMIN = TuoiMin, @TUOIMAX = TuoiMax
	FROM THAMSO

	IF (DATEDIFF(year, @NGAYSINHDG, @NGAYLAPTHE) < @TUOIMIN OR DATEDIFF(year, @NGAYSINHDG,  @NGAYLAPTHE) > @TUOIMAX)
	BEGIN
		PRINT N'Lỗi: Tuổi của độc giả phải từ ' + CAST(@TUOIMIN AS varchar) + N' đến ' + CAST(@TUOIMAX AS varchar)
		ROLLBACK TRANSACTION
	END	
	/*Ngày hết hạn thẻ*/
	UPDATE THEDOCGIA 
	SET NgayHetHan = DATEADD(month, O.HanThe, I.NgayLapThe)
	FROM INSERTED I, THAMSO O, THEDOCGIA A
	WHERE A.IDDocGia = I.IDDocGia
END
GO
--DROP TRIGGER TRG_ISA
CREATE TRIGGER TRG_ISA ON SACH
FOR INSERT, UPDATE
AS
BEGIN

/*Sách xuất bản 8 năm*/

	DECLARE @NAMXB int

	SELECT @NAMXB = NamXB
	FROM INSERTED

	DECLARE @NGAYNHAP date, @KHOANGCACHXB int

	SELECT @NGAYNHAP = A.NgayNhap 
	FROM INSERTED I, PHIEUNHAPSACH A, CT_PHIEUNHAPSACH B
	WHERE A.IDPhieuNhap = B.IDPhieuNhap AND B.IDSach = I.IDSach	
	SELECT @KHOANGCACHXB = KhoangCachXB
	FROM THAMSO

	IF((year(@NGAYNHAP) - @NAMXB) > @KHOANGCACHXB)
	BEGIN
		PRINT N'Lỗi: Chỉ nhận các sách xuất bản trong vòng ' + CAST(@KHOANGCACHXB AS varchar) + N' năm'
		ROLLBACK TRANSACTION
	END

END
GO
--DROP TRIGGER TRG_ITG
CREATE TRIGGER TRG_ITG ON TACGIA
FOR INSERT
AS
BEGIN

/*Max 100 tác giả*/
	IF((SELECT COUNT(DISTINCT IDTacGia) FROM TACGIA) > 100)
	BEGIN
		PRINT N'Lỗi: Vượt quá 100 tác giả'
		ROLLBACK TRANSACTION
	END
END
GO
--DROP TRIGGER TRG_U_IPN
CREATE TRIGGER TRG_U_IPN ON PHIEUNHAPSACH
FOR UPDATE
AS
BEGIN

	DECLARE @NGAYNHAPI date, @NGAYNHAPD date, @KHOANGCACHXB int
	SELECT @NGAYNHAPI = I.NgayNhap, @NGAYNHAPD = D.NgayNhap
	FROM INSERTED I, DELETED D
	SELECT @KHOANGCACHXB = KhoangCachXB
	FROM THAMSO

	IF(@NGAYNHAPI <> @NGAYNHAPD)
	BEGIN
		DECLARE @ROWNUM int, @ROW int = 0
		SELECT @ROWNUM = (SELECT COUNT(*) FROM INSERTED I, CT_PHIEUNHAPSACH A
						  WHERE A.IDPhieuNhap = I.IDPhieuNhap)

		SELECT IDENTITY(int, 1, 1) AS Num, IDCTPhieuNhap, A.IDPhieuNhap, IDSach, SoLuong, DonGia, ThanhTien INTO #INSERTED FROM INSERTED I, CT_PHIEUNHAPSACH A
																																  WHERE A.IDPhieuNhap = I.IDPhieuNhap
		
		WHILE (@ROW < @ROWNUM)
		BEGIN
			SET @ROW += 1

			DECLARE @NAMXB int

			SELECT @NAMXB = NamXB 
			FROM #INSERTED I, SACH A
			WHERE A.IDSach = I.IDSach AND I.Num = @ROW

			IF((year(@NGAYNHAPI) - @NAMXB) > @KHOANGCACHXB)
			BEGIN
				PRINT N'Lỗi: Chỉ nhận các sách xuất bản trong vòng ' + CAST(@KHOANGCACHXB AS varchar) + N' năm'
				ROLLBACK TRANSACTION
			END
		END
	END

END
GO
--DROP TRIGGER TRG_IU_CPN
CREATE TRIGGER TRG_IU_CPN ON CT_PHIEUNHAPSACH
FOR INSERT, UPDATE
AS
BEGIN

/*Sách xuất bản 8 năm*/
	DECLARE @NGAYNHAP date, @NAMXB int, @KHOANGCACHXB int

	SELECT @NGAYNHAP = NgayNhap 
	FROM INSERTED I, PHIEUNHAPSACH A
	WHERE I.IDPhieuNhap = A.IDPhieuNhap
	SELECT @NAMXB = NamXB
	FROM INSERTED I, SACH A
	WHERE I.IDSach = A.IDSach
	SELECT @KHOANGCACHXB = KhoangCachXB
	FROM THAMSO

	IF((year(@NGAYNHAP) - @NAMXB) > @KHOANGCACHXB)
	BEGIN
		PRINT N'Lỗi: Chỉ nhận các sách xuất bản trong vòng ' + CAST(@KHOANGCACHXB AS varchar) + N' năm'
		ROLLBACK TRANSACTION
	END

END
GO
--DROP TRIGGER TRG_IU_IPM
CREATE TRIGGER TRG_IU_IPM ON PHIEUMUON
FOR INSERT, UPDATE
AS
BEGIN

/*NgayMuon > NgayLapThe*/
	DECLARE @NGAYMUON date, @NGAYLAPTHE date
	
	SELECT @NGAYMUON = NgayMuon, @NGAYLAPTHE = NgayLapThe
	FROM INSERTED I, THEDOCGIA A
	WHERE A.IDDocGia = I.IDDocGia

	IF (@NGAYMUON < @NGAYLAPTHE)
	BEGIN
		PRINT N'Ngày mượn sách phải lớn hơn hoặc bằng ngày lập thẻ độc giả'
		ROLLBACK TRANSACTION
	END

/*Hạn trả 4 ngày*/
	UPDATE PHIEUMUON
	SET HanTra = DATEADD(day, O.SoNgayMuonMax, I.NgayMuon)
	FROM INSERTED I, THAMSO O, PHIEUMUON A
	WHERE A.IDPhieuMuon = I.IDPhieuMuon

/*UPDATE SoNgayMuon(CT_PHIEUTRA) khi UPDATE NgayMuon*/
	DECLARE @NGAYMUONI date, @NGAYMUOND date
	SELECT @NGAYMUONI = I.NgayMuon, @NGAYMUOND = D.NgayMuon
	FROM INSERTED I, DELETED D

	IF(@NGAYMUONI <> @NGAYMUOND)
	BEGIN
		UPDATE CUONSACH
		SET TinhTrang = N'Đã cho mượn'
		FROM INSERTED I, CUONSACH A, CT_PHIEUMUON B
		WHERE B.IDPhieuMuon = I.IDPhieuMuon AND A.IDCuonSach = B.IDCuonSach

		UPDATE CT_PHIEUTRA
		SET	SoNgayMuon = DATEDIFF(day, I.NgayMuon, A.NgayTra)
		FROM INSERTED I, PHIEUTRA A, CT_PHIEUTRA B
		WHERE B.IDPhieuMuon = I.IDPhieuMuon
			  AND A.IDPhieuTra = B.IDPhieuTra
	END

END
GO
--DROP TRIGGER TRG_IU_CPM
ALTER TRIGGER TRG_IU_CPM ON CT_PHIEUMUON
FOR INSERT, UPDATE
AS
BEGIN

/*Kiểm tra sách còn số lượng tồn k*/
	--DECLARE @SOLUONGTON int

	--SELECT @SOLUONGTON = B.SoLuongTon
	--FROM INSERTED I, CUONSACH A, SACH B
	--WHERE A.IDCuonSach = I.IDCuonSach AND B.IDSach = A.IDSach

	--IF (@SOLUONGTON = 0)
	--BEGIN
	--	PRINT N'Số lượng sách đã hết'
	--	ROLLBACK TRANSACTION
	--END
/*Quy định cho mượn sách.9*/
	DECLARE @NGAYHETHAN date, @IDCUONSACH varchar(6), @IDDOCGIA varchar(6), @NGAYMUON date, @TINHTRANG nvarchar(20)
		
	SELECT @IDCUONSACH = IDCuonSach, @IDDOCGIA = IDDocGia, @NGAYMUON = NgayMuon
	FROM INSERTED I, PHIEUMUON A
	WHERE I.IDPhieuMuon = A.IDPhieuMuon
	SELECT @NGAYHETHAN = NgayHetHan
	FROM THEDOCGIA
	WHERE IDDocGia = @IDDOCGIA
	SELECT @TINHTRANG = TinhTrang
	FROM CUONSACH
	WHERE IDCuonSach = @IDCUONSACH

	IF(@NGAYHETHAN <= @NGAYMUON) OR (@TINHTRANG = N'Đã cho mượn') OR EXISTS (SELECT * FROM PHIEUMUON A, CT_PHIEUMUON B, CUONSACH C
																		     WHERE A.IDPhieuMuon = B.IDPhieuMuon 
																			 AND A.IDDocGia = @IDDOCGIA AND A.HanTra < @NGAYMUON
																		     AND C.IDCuonSach = B.IDCuonSach AND C.TinhTrang = N'Đã cho mượn')
	BEGIN
		PRINT N'Lỗi: Chỉ cho mượn với thẻ còn hạn, không có sách mượn quá hạn, và sách không có người đang mượn'
		ROLLBACK TRANSACTION
	END
	ELSE
	BEGIN
		UPDATE CUONSACH
		SET TinhTrang = N'Đã cho mượn'
		WHERE IDCuonSach = @IDCUONSACH

		--UPDATE SACH
		--SET SoLuongTon -= 1
		--FROM SACH A, CUONSACH B
		--WHERE A.IDSach = B.IDSach AND B.IDCuonSach = @IDCUONSACH
	END

/*Mỗi độc giả Max mượn 5 cuốn*/
	DECLARE @SOSACHMUONMAX int	
	
	SELECT @SOSACHMUONMAX = SoSachMuonMax
	FROM THAMSO

	IF((SELECT COUNT(DISTINCT A.IDCuonSach) 
		FROM CT_PHIEUMUON A, PHIEUMUON B
		WHERE A.IDPhieuMuon = B.IDPhieuMuon AND B.IDDocGia = @IDDOCGIA
		AND NOT EXISTS (SELECT * FROM CT_PHIEUTRA C, PHIEUTRA D
						WHERE C.IDCuonSach = A.IDCuonSach AND C.IDPhieuTra = D.IDPhieuTra
						AND D.NgayTra < B.NgayMuon))) > @SOSACHMUONMAX		
	BEGIN
		PRINT N'Lỗi: Mỗi độc giả chỉ mượn tối đa ' + CAST(@SOSACHMUONMAX AS varchar) + N' quyển sách'
		ROLLBACK TRANSACTION 
	END	

END
GO
--DROP TRIGGER TRG_IU_ITP
CREATE TRIGGER TRG_IU_ITP ON PHIEUTHUTIENPHAT
FOR INSERT, UPDATE
AS
BEGIN

/*Áp dụng QĐ số tiền thu*/
	DECLARE @SOTIENTHU money, @TONGNO money, @APDUNGQDSOTIENTHU int
	
	SELECT @SOTIENTHU = SoTienThu
	FROM INSERTED
	SELECT @TONGNO = TongNo
	FROM INSERTED I, THEDOCGIA A
	WHERE I.IDDocGia = A.IDDocGia
	SELECT @APDUNGQDSOTIENTHU = ApDungQDSoTienThu
	FROM THAMSO
	
	IF(@APDUNGQDSOTIENTHU = 1)
	BEGIN
		IF(@SOTIENTHU > @TONGNO)
		BEGIN
			PRINT N'Số tiền thu không được vượt quá số tiền độc giả đang nợ'
			ROLLBACK TRANSACTION
		END
	END

END


CREATE TRIGGER TRG_U_IPT ON PHIEUTRA
FOR UPDATE
AS
BEGIN

/*TienNoKyNay*/
	DECLARE @ROWNUM int, @ROW int = 0
	SELECT @ROWNUM = (SELECT COUNT(*) FROM INSERTED)

	SELECT IDENTITY(int, 1, 1) AS Num, IDPhieuTra, IDDocGia, NgayTra, TienPhatKyNay, SoTienTra, TienNoKyNay INTO #INSERTED FROM INSERTED
		
	WHILE (@ROW < @ROWNUM)
	BEGIN		
		SET @ROW += 1

		DECLARE @TIENPHATKYNAY money, @SOTIENTRA money

		SELECT @TIENPHATKYNAY = TienPhatKyNay, @SOTIENTRA = SoTienTra
		FROM #INSERTED I
		WHERE I.Num = @ROW

		IF (@SOTIENTRA > @TIENPHATKYNAY)
		BEGIN
			PRINT N'Số tiền trả(Phiếu trả) vượt quá tiền phạt kỳ này. Vui lòng nhập lại số tiền trả'

			UPDATE PHIEUTRA
			SET TienNoKyNay = 0
			FROM #INSERTED I, PHIEUTRA A
			WHERE A.IDPhieuTra = I.IDPhieuTra AND I.Num = @ROW
		END
		ELSE
		BEGIN
			UPDATE PHIEUTRA
			SET TienNoKyNay = A.TienPhatKyNay - A.SoTienTra
			FROM #INSERTED I, PHIEUTRA A
			WHERE A.IDPhieuTra = I.IDPhieuTra AND I.Num = @ROW
		END	
	END
	
/*TongNo*/
	UPDATE THEDOCGIA
	SET TongNo = (SELECT SUM(A.TienNoKyNay)
				  FROM INSERTED I, PHIEUTRA A
				  WHERE A.IDDocGia = I.IDDocGia)
	FROM INSERTED I, THEDOCGIA A
	WHERE A.IDDocGia = I.IDDocGia			  		

/*UPDATE SoNgayMuon(CT_PHIEUTRA) khi UPDATE NgayTra*/
	DECLARE @NGAYTRAI date, @NGAYTRAD date
	SELECT @NGAYTRAI = I.NgayTra, @NGAYTRAD = D.NgayTra
	FROM INSERTED I, DELETED D

	IF(@NGAYTRAI <> @NGAYTRAD)
	BEGIN
		UPDATE CUONSACH
		SET TinhTrang = N'Đã cho mượn'
		FROM INSERTED I, CUONSACH A, CT_PHIEUTRA B
		WHERE B.IDPhieuTra = I.IDPhieuTra AND A.IDCuonSach = B.IDCuonSach

		UPDATE CT_PHIEUTRA
		SET	SoNgayMuon = DATEDIFF(day, B.NgayMuon, I.NgayTra)
		FROM INSERTED I, CT_PHIEUTRA A, PHIEUMUON B
		WHERE A.IDPhieuTra = I.IDPhieuTra
			  AND B.IDPhieuMuon = A.IDPhieuMuon
	END

END

--DROP TRIGGER TRG_IU_CPT
alter TRIGGER TRG_IU_CPT ON CT_PHIEUTRA
FOR INSERT, UPDATE
AS
BEGIN

/*Điều kiện*/
	DECLARE @TINHTRANG nvarchar(20), @SONGAYMUONMAX int, @TIENPHATMOINGAY int
	
	SELECT @TINHTRANG = TinhTrang
	FROM INSERTED I, CUONSACH A
	WHERE A.IDCuonSach = I.IDCuonSach
	SELECT @SONGAYMUONMAX = SoNgayMuonMax, @TIENPHATMOINGAY = TienPhatMoiNgay
	FROM THAMSO	

	IF (@TINHTRANG = N'Chưa cho mượn') --****
	BEGIN
		PRINT N'Sách chưa cho mượn'
		ROLLBACK TRANSACTION
	END	
	ELSE
	BEGIN

	/*IDPhieuMuon, SoNgayMuon*/
		UPDATE CT_PHIEUTRA
		SET IDPhieuMuon = C.IDPhieuMuon, SoNgayMuon = DATEDIFF(day, C.NgayMuon, A.NgayTra)
		FROM INSERTED I, PHIEUTRA A, CT_PHIEUTRA B, PHIEUMUON C, CT_PHIEUMUON D
		WHERE B.IDCTPhieuTra = I.IDCTPhieuTra
			  AND A.IDPhieuTra = B.IDPhieuTra AND C.IDPhieuMuon = D.IDPhieuMuon 
			  AND B.IDCuonSach = D.IDCuonSach AND NOT EXISTS (SELECT * FROM PHIEUMUON M, CT_PHIEUMUON N 
															  WHERE M.IDPhieuMuon = N.IDPhieuMuon AND N.IDCuonSach = B.IDCuonSach 
															  AND M.NgayMuon > C.NgayMuon);
																	
	/*NgayTra > NgayMuon*/
		DECLARE @ROWNUM1 int, @ROW1 int = 0
		SELECT @ROWNUM1 = (SELECT COUNT(*) FROM INSERTED)

		SELECT IDENTITY(int, 1, 1) AS Num1, IDCTPhieuTra, IDPhieuTra, IDCuonSach, IDPhieuMuon, SoNgayMuon, TienPhat INTO #INSERTED1 FROM INSERTED
		
		WHILE (@ROW1 < @ROWNUM1)
		BEGIN
			SET @ROW1 += 1
			
			DECLARE @SONGAYMUON int

			SELECT @SONGAYMUON = A.SoNgayMuon
			FROM #INSERTED1 I1, CT_PHIEUTRA A
			WHERE A.IDCTPhieuTra = I1.IDCTPhieuTra AND I1.Num1 = @ROW1

			IF (@SONGAYMUON < 0)
			BEGIN
				PRINT N'Ngày trả(phiếu trả) phải lớn hơn ngày mượn(phiếu mượn)'
				ROLLBACK TRANSACTION
			END	

			IF (@SONGAYMUON = 0)
			BEGIN
				UPDATE CT_PHIEUTRA
				SET SoNgayMuon = 1
				FROM #INSERTED1 I1, CT_PHIEUTRA A
				WHERE A.IDCTPhieuTra = I1.IDCTPhieuTra AND I1.Num1 = @ROW1		
			END

	/*TienPhat và Tự động thêm BCSACHTRATRE*/		
			DECLARE @NGAYTRA date, @IDCUONSACH varchar(6), @IDPHIEUMUON varchar(6)

			SELECT @NGAYTRA = NgayTra, @IDCUONSACH = I1.IDCuonSach, @IDPHIEUMUON = B.IDPhieuMuon --
			FROM #INSERTED1 I1, PHIEUTRA A, CT_PHIEUTRA B
			WHERE A.IDPhieuTra = I1.IDPhieuTra AND B.IDCTPhieuTra = I1.IDCTPhieuTra AND I1.Num1 = @ROW1

			IF (@SONGAYMUON > @SONGAYMUONMAX)
			BEGIN
				UPDATE CT_PHIEUTRA
				SET TienPhat = @TIENPHATMOINGAY * (A.SoNgayMuon - @SONGAYMUONMAX)
				FROM #INSERTED1 I1, CT_PHIEUTRA A
				WHERE A.IDCTPhieuTra = I1.IDCTPhieuTra AND I1.Num1 = @ROW1
		/*Tự động thêm BCSACHTRATRE*/ --- 23/5
				DECLARE @t int
				DECLARE @mt varchar(5) = '0'				
				
				SET @t = (SELECT COUNT (IDBCSachTre) 
						  FROM BCSACHTRATRE)
				SET @t += 1
				IF (@t >= 10 AND @t < 100) 
				BEGIN
					SET @mt = '0'
				END
				ELSE
				BEGIN
					IF (@t >= 100 AND @t < 1000) 
					BEGIN
						SET @mt = '0'
					END
				END				

				IF (EXISTS (SELECT * FROM #INSERTED1 I1, BCSACHTRATRE A 
									WHERE A.IDCuonSach = I1.IDCuonSach AND A.IDPhieuMuon = I1.IDPhieuMuon AND I1.Num1 = @ROW1))
				BEGIN
					UPDATE BCSACHTRATRE
					SET NgayThangNam = @NGAYTRA
					FROM #INSERTED1 I1, BCSACHTRATRE A
					WHERE A.IDCuonSach = I1.IDCuonSach AND A.IDPhieuMuon = I1.IDPhieuMuon AND I1.Num1 = @ROW1
				END
				ELSE
				BEGIN
					INSERT INTO BCSACHTRATRE (IDBCSachTre, NgayThangNam, IDCuonSach, IDPhieuMuon) VALUES (@mt + CAST(@t AS varchar), @NGAYTRA, @IDCUONSACH, @IDPHIEUMUON)
				END
			END
			ELSE
			BEGIN
				UPDATE CT_PHIEUTRA
				SET TienPhat = 0
				FROM #INSERTED1 I1, CT_PHIEUTRA A
				WHERE A.IDCTPhieuTra = I1.IDCTPhieuTra AND I1.Num1 = @ROW1	
		/*update BCSACHTRATRE khi k trả trễ*/ --- 23/5
				UPDATE BCSACHTRATRE 
				SET SoNgayTraTre = 0
				WHERE IDCuonSach = @IDCUONSACH AND IDPhieuMuon = @IDPHIEUMUON
			END
		END

	/*Sau khi trả thành công*/
		UPDATE CUONSACH
		SET TinhTrang = N'Chưa cho mượn'
		FROM INSERTED I, CUONSACH A
		WHERE A.IDCuonSach = I.IDCuonSach

	/*Thay đổi IDCuonSach cùng hàng*/
		DECLARE @IDCUONSACHI varchar(6), @IDCUONSACHD varchar(6)
		SELECT @IDCUONSACHI = I.IDCuonSach, @IDCUONSACHD = D.IDCuonSach
		FROM INSERTED I, DELETED D	
		
		IF (@IDCUONSACHI <> @IDCUONSACHD)
		BEGIN
			UPDATE CUONSACH
			SET TinhTrang = N'Đã cho mượn'
			FROM DELETED D, CUONSACH A
			WHERE A.IDCuonSach = D.IDCuonSach

			UPDATE CUONSACH
			SET TinhTrang = N'Chưa cho mượn'
			FROM INSERTED I, CUONSACH A
			WHERE A.IDCuonSach = I.IDCuonSach
		END									
		
	/*TienPhatKyNay*/
		DECLARE @ROWNUM2 int, @ROW2 int = 0
		SELECT @ROWNUM2 = (SELECT COUNT(*) FROM INSERTED)

		SELECT IDENTITY(int, 1, 1) AS Num2, IDCTPhieuTra, IDPhieuTra, IDCuonSach, IDPhieuMuon, SoNgayMuon, TienPhat INTO #INSERTED2 FROM INSERTED
		
		WHILE (@ROW2 < @ROWNUM2)
		BEGIN
			SET @ROW2 += 1

			UPDATE PHIEUTRA
			SET TienPhatKyNay = (SELECT SUM(A.TienPhat)
							     FROM #INSERTED2 I2, CT_PHIEUTRA A
							     WHERE A.IDPhieuTra = I2.IDPhieuTra AND I2.Num2 = @ROW2)
			FROM #INSERTED2 I2, PHIEUTRA A
			WHERE A.IDPhieuTra = I2.IDPhieuTra AND I2.Num2 = @ROW2
		END
		
	END

END
GO
--DROP TRIGGER TRG_IU_IST
CREATE TRIGGER TRG_IU_IST ON BCSACHTRATRE
FOR INSERT, UPDATE
AS
BEGIN

/*NgayThangNam >= min(NgayTra)*/
	DECLARE @NGAYTHANGNAM date, @NGAYTRA date

	SELECT @NGAYTHANGNAM = NgayThangNam
	FROM INSERTED
	SELECT @NGAYTRA = A.NgayTra
	FROM PHIEUTRA A
	WHERE NOT EXISTS (SELECT * FROM PHIEUTRA B
					  WHERE B.NgayTra < A.NgayTra)

	IF (@NGAYTHANGNAM < @NGAYTRA)
	BEGIN
		PRINT N'Ngày tháng năm của "Báo cáo thông kê sách trả trễ" phải lớn hơn hoặc bằng ngày trả sách đầu tiên'
		ROLLBACK TRANSACTION
	END

/*SoNgayTraTre*/
	DECLARE @SONGAYMUONMAX int

	SELECT @SONGAYMUONMAX = SoNgayMuonMax 
	FROM THAMSO

	UPDATE BCSACHTRATRE
	SET SoNgayTraTre = SoNgayMuon - @SONGAYMUONMAX
	FROM INSERTED I, BCSACHTRATRE A, CT_PHIEUTRA B
	WHERE A.IDBCSachTre = I.IDBCSachTre
		  AND A.IDCuonSach = B.IDCuonSach AND A.IDPhieuMuon = B.IDPhieuMuon

END
GO
--DROP TRIGGER TRG_I_IMS
CREATE TRIGGER TRG_I_IMS ON BCTINHHINHMUONSACH
FOR INSERT
AS
BEGIN

/*NgayLap*/
	UPDATE BCTINHHINHMUONSACH
	SET NgayLap = GETDATE()
	FROM INSERTED I, BCTINHHINHMUONSACH A
	WHERE A.IDBCMuonSach = I.IDBCMuonSach

/*Tự động thêm CT_BCTINHHINHMUONSACH*/ --- 22/5
	DECLARE @t int, @j int, @i int = 1
	DECLARE @mt varchar(5) = '0', @mj varchar(5) = '0'
	DECLARE @IDBCMUONSACH varchar(6)
	
	SET @t = (SELECT COUNT (IDCTBCMuonSach) 
			  FROM CT_BCTINHHINHMUONSACH)
	SET @j = (SELECT COUNT (IDLoaiSach)
			  FROM LOAISACH)
	SELECT @IDBCMUONSACH = IDBCMuonSach
	FROM INSERTED	
		
	WHILE (@i <= @j)
	BEGIN
		SET @t += 1
		IF (@t >= 10 AND @t < 100) 
		BEGIN
			SET @mt = '0'
		END
		ELSE
		BEGIN
			IF (@t >= 100 AND @t < 1000) 
			BEGIN
				SET @mt = '0'
			END
		END

		IF (@i >= 10 AND @i < 100) 
		BEGIN
			SET @mj = '0'
		END
		ELSE 
		BEGIN
			IF (@i >= 100 AND @i < 1000) 
			BEGIN
				SET @mj = '0'
			END
		END
		
		INSERT INTO CT_BCTINHHINHMUONSACH (IDCTBCMuonSach, IDBCMuonSach, IDLoaiSach) VALUES (@mt + CAST(@t AS varchar), @IDBCMUONSACH, @mj + CAST(@i AS varchar))		
		SET @i += 1
	END

END
GO
--DROP TRIGGER TRG_IU_CMS
CREATE TRIGGER TRG_IU_CMS ON CT_BCTINHHINHMUONSACH
FOR INSERT, UPDATE
AS
BEGIN

/*SoLuotMuon*/
	UPDATE CT_BCTINHHINHMUONSACH
	SET SoLuotMuon = (SELECT COUNT(*) FROM INSERTED I, BCTINHHINHMUONSACH A, PHIEUMUON B, CT_PHIEUMUON C , CUONSACH D, SACH E, DAUSACH F
					  WHERE A.IDBCMuonSach = I.IDBCMuonSach AND B.IDPhieuMuon = C.IDPhieuMuon					        
						    AND C.IDCuonSach = D.IDCuonSach AND D.IDSach = E.IDSach AND E.IDDauSach = F.IDDauSach
						    AND F.IDLoaiSach = I.IDLoaiSach AND month(B.NgayMuon) = A.Thang AND year(B.NgayMuon) = A.Nam)
	FROM INSERTED I, CT_BCTINHHINHMUONSACH A
	WHERE A.IDCTBCMuonSach = I.IDCTBCMuonSach

/*TongSoLuotMuon*/
	UPDATE BCTINHHINHMUONSACH
	SET TongSoLuotMuon = (SELECT SUM(B.SoLuotMuon)
						  FROM INSERTED I, BCTINHHINHMUONSACH A, CT_BCTINHHINHMUONSACH B
						  WHERE A.IDBCMuonSach = I.IDBCMuonSach AND B.IDBCMuonSach = A.IDBCMuonSach)								
	FROM INSERTED I, BCTINHHINHMUONSACH A
	WHERE A.IDBCMuonSach = I.IDBCMuonSach

/*TiLe*/
	DECLARE @TONGSOLUOTMUON int

	SELECT @TONGSOLUOTMUON = TongSoLuotMuon
	FROM INSERTED I, BCTINHHINHMUONSACH A
	WHERE A.IDBCMuonSach = I.IDBCMuonSach

	IF (@TONGSOLUOTMUON = 0)
	BEGIN
		UPDATE CT_BCTINHHINHMUONSACH
		SET TiLe = 0
		FROM INSERTED I, CT_BCTINHHINHMUONSACH A
		WHERE A.IDCTBCMuonSach = I.IDCTBCMuonSach
	END
	ELSE
	BEGIN
		UPDATE CT_BCTINHHINHMUONSACH
		SET TiLe = 100*(CAST (B.SoLuotMuon AS float) / CAST (A.TongSoLuotMuon AS float))
		FROM INSERTED I, BCTINHHINHMUONSACH A, CT_BCTINHHINHMUONSACH B
		WHERE A.IDBCMuonSach = I.IDBCMuonSach AND B.IDBCMuonSach = A.IDBCMuonSach
	END

END